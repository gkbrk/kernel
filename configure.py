#!/usr/bin/env python3
from pathlib import Path
import subprocess
import sys
import hashlib
import time

# This file is used to generate a Makefile for the project.

CC = "i686-elf-gcc"

CFLAGS = []
CFLAGS.append("-ffreestanding")
CFLAGS.append("-flto")
CFLAGS.append("-I.")
CFLAGS.append("-nostdlib")
CFLAGS.append("-Ofast")
CFLAGS.append("-pedantic")
CFLAGS.append("-std=c99")
CFLAGS.append("-Wall")
CFLAGS.append("-Wextra")

CXX = "i686-elf-g++"

CXXFLAGS = []
CXXFLAGS.append("-ffreestanding")
CXXFLAGS.append("-flto")
CXXFLAGS.append("-fno-exceptions")
CXXFLAGS.append("-fno-rtti")
CXXFLAGS.append("-I.")
CXXFLAGS.append("-Ofast")
CXXFLAGS.append("-pedantic")
CXXFLAGS.append("-std=c++17")
CXXFLAGS.append("-Wall")
CXXFLAGS.append("-Wextra")

print(f"""
# Kernel Makefile
# Generated by configure.py at {time.strftime("%Y-%m-%d %H:%M:%S")}
# Do not edit this file manually.

CC = {CC}
CXX = {CXX}
CFLAGS = {' '.join(CFLAGS)}
CXXFLAGS = {' '.join(CXXFLAGS)}

all: leonardo.bin tar-drive.tar
.PHONY: all

""")

def sha256(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

def relative(p: Path) -> Path:
    return p.resolve().relative_to(Path.cwd())


OBJ_FILES = []


def get_c_dependencies(file: Path) -> list[str]:
    """Get the dependencies of a C file."""
    res = subprocess.run([CC, *CFLAGS, "-M", file], capture_output=True)
    if res.returncode != 0:
        print("Error getting dependencies for ", file)
        print(res.stderr.decode("utf-8"))
        sys.exit(1)
    
    deps = res.stdout.decode("utf-8").split(" ")[2:]
    deps = [d.strip() for d in deps]
    deps = [d for d in deps if d != "\\"]
    
    # Filter absolute
    deps = [d for d in deps if not d.startswith("/")]

    deps = [str(relative(Path(d).resolve())) for d in deps]
    return deps


c_files = []
c_files += Path("libk").glob("**/*.c")


for c_file in c_files:
    c_file = relative(c_file)
    path = str(c_file)
    OBJ_FILES.append(f"build/{sha256(path)}")
    print(f"build/{sha256(path)}", ":", path, " ".join(get_c_dependencies(c_file)))
    print(f"\t$(CC) $(CFLAGS) -c {path} -o $@")


def get_cpp_dependencies(file: Path) -> list[str]:
    """Get the dependencies of a C++ file."""
    res = subprocess.run([CXX, *CXXFLAGS, "-M", file], capture_output=True)
    if res.returncode != 0:
        print("Error getting dependencies for ", file)
        print(res.stderr.decode("utf-8"))
        sys.exit(1)
    
    deps = res.stdout.decode("utf-8").split(" ")[2:]
    deps = [d.strip() for d in deps]
    deps = [d for d in deps if d != "\\"]
    
    # Filter absolute
    deps = [d for d in deps if not d.startswith("/")]

    deps = [str(relative(Path(d).resolve())) for d in deps]
    return deps

cpp_files = []
cpp_files += Path("arch").glob("**/*.cpp")
cpp_files += Path("kernel").glob("**/*.cpp")
cpp_files += Path("libk").glob("**/*.cpp")
cpp_files += [Path("kernel.cpp")]

for cpp_file in cpp_files:
    cpp_file = relative(cpp_file)
    path = str(cpp_file)
    OBJ_FILES.append(f"build/{sha256(path)}")
    print(f"build/{sha256(path)}", ":", path, " ".join(get_cpp_dependencies(cpp_file)))
    print(f"\t$(CXX) -c {path} -o build/{sha256(path)} $(CXXFLAGS)")

nasm_files = []
nasm_files += Path("arch").glob("**/*.asm")
nasm_files += [Path("boot.asm")]

for nasm_file in nasm_files:
    nasm_file = relative(nasm_file)
    path = str(nasm_file)
    OBJ_FILES.append(f"build/{sha256(path)}")
    print(f"build/{sha256(path)}", ":", path)
    print(f"\tnasm -felf32 {path} -o build/{sha256(path)}")


gas_files = []
gas_files += Path("kernel").glob("**/*.s")

for gas_file in gas_files:
    gas_file = relative(gas_file)
    path = str(gas_file)
    OBJ_FILES.append(f"build/{sha256(path)}")
    print(f"build/{sha256(path)}", ":", path)
    print(f"\ti686-elf-as {path} -o build/{sha256(path)}")

no_flto_c_files = []
no_flto_c_files += Path("no_flto_c").glob("**/*.c")

for c_file in no_flto_c_files:
    c_file = relative(c_file)
    path = str(c_file)
    flags = CFLAGS.copy()
    flags.remove("-flto")
    OBJ_FILES.append(f"build/{sha256(path)}")
    print(f"build/{sha256(path)}", ":", path, " ".join(get_c_dependencies(c_file)))
    print(f"\t{CC} -c {path} -o build/{sha256(path)} {' '.join(flags)}")

print(f"leonardo.bin: {' '.join(OBJ_FILES)}")
print(f"\t{CC} -T linker.ld -o leonardo.bin {' '.join(CFLAGS)} {' '.join(OBJ_FILES)}")
OBJ_FILES.append("leonardo.bin")

# tar drive
tar_files = []
for f in Path("tar-drive").glob("**/*"):
    tar_files.append(relative(f))

print(f"tar-drive.tar: {' '.join([str(x) for x in tar_files])}")
print(f"\ttar -cvf tar-drive.tar -C tar-drive {' '.join([str(f.relative_to(Path('tar-drive'))) for f in tar_files])}")
OBJ_FILES.append("tar-drive.tar")

# Clean rule

print("clean:")

for obj_file in OBJ_FILES:
    print(f"\trm -f {obj_file}")
print(".PHONY: clean")