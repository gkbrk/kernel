#!/bin/sh

# C rules
ORIG=${CFLAGS}
CFLAGS="-std=gnu99 -ffreestanding"
CFLAGS="${CFLAGS} -Os"
CFLAGS="${CFLAGS} -Wall -Wextra -pedantic"
CFLAGS="${CFLAGS} ${ORIG}"

# CPP
ORIG=${CXXFLAGS}
CXXFLAGS="-Ofast -flto -DDEBUG"
CXXFLAGS="${CXXFLAGS} -Wall -Wextra -pedantic"
CXXFLAGS="${CXXFLAGS} -fno-exceptions -fno-rtti -ffreestanding"
CXXFLAGS="${CXXFLAGS} -std=c++17"
CXXFLAGS="${CXXFLAGS} -I."
CXXFLAGS="${CXXFLAGS} ${ORIG}"

build_cc_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}" "${file}"
    printf "	%s\n\n" "i686-elf-gcc ${CFLAGS} -c ${file} -o ${objname}"
}

build_cpp_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}" "${file}"
    printf "	%s\n\n" "i686-elf-c++ -o ${objname} -I. -c ${file} ${CXXFLAGS}"
}

build_nasm_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}" "${file}"
    printf "	%s\n\n" "nasm -felf32 ${file} -o ${objname}"
}

build_gas_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}" "${file}"
    printf "	%s\n\n" "as --32 -c ${file} -o ${objname}"
}

build_tar_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}"
    printf "	%s\n\n" "tar cvf ${objname} -C tar-drive/ ${file}"
}

build_link_makefile () {
    objname="${1}";shift
    file="${1}";shift
    printf "%s: %s\n" "${objname}" "${file}"
    printf "	%s\n\n" "i686-elf-c++ -T linker.ld -Ofast -flto -s -nostdlib -fno-stack-protector -o ${objname} ${file} -lgcc"
}

getobjname () {
    a=$(printf "%s" "${1}" | md5sum | cut -d' ' -f 1)
    printf "build/%s" "${a}"
}

cat <<EOF

# Kernel build script
# Generated on $(date)

all: leonardo.bin
.PHONY: all

EOF

objfiles=""
toClean=""

printf "# C files\n\n"
for file in $(find . -type f -iname '*.c')
do
    objname=$(getobjname "${file}")
    build_cc_makefile "${objname}" "${file}"
    objfiles="${objfiles} ${objname}"
    toClean="${toClean} ${objname}"
done

printf "# C++ files\n\n"
for file in $(find . -type f -iname '*.cpp')
do
    objname=$(getobjname "${file%.cpp}.o")
    build_cpp_makefile "${objname}" "${file}"
    objfiles="${objfiles} ${objname}"
    toClean="${toClean} ${objname}"
done

printf "# NASM files\n\n"
for file in $(find . -type f -iname '*.asm')
do
    objname=$(getobjname "${file%.asm}.o")
    build_nasm_makefile "${objname}" "${file}"
    objfiles="${objfiles} ${objname}"
    toClean="${toClean} ${objname}"
done

printf "# GAS files\n\n"
for file in $(find . -type f -iname '*.s')
do
    objname=$(getobjname "${file%.s}.o")
    build_gas_makefile "${objname}" "${file}"
    objfiles="${objfiles} ${objname}"
    toClean="${toClean} ${objname}"
done

printf "# tar drive\n\n"
tarfiles=""
cd tar-drive/
for file in $(find . -type f)
do
    tarfiles="${tarfiles} ${file}"
done
cd ..
build_tar_makefile "tar-drive.tar" "${tarfiles}"
toClean="${toClean} tar-drive.tar"

build_link_makefile "leonardo.bin" "${objfiles}"
toClean="${toClean} leonardo.bin"

printf "clean:\n"
for file in ${toClean}
do
    printf "	rm -f %s\n" "${file}"
done
printf ".PHONY: clean\n\n"
